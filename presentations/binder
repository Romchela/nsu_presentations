<h1>Объектно-ориентированное программирование</h1>
<div class="sl1">
Объектно-ориентированное программирование (далее ООП) - это способ организации кода в программе путем его группировки в виде объектов, то есть отдельных элементов, которые включают информацию (значения данных) и функции. Объектно-ориентированный подход к организации программы позволяет группировать определенные фрагменты информации вместе с часто используемыми функциями или действиями, связанными с этой информацией. Основными концепциями в ООП являются понятия объектов и классов. Объект обладает своими данными, может "реагировать" на посылаемые ему сообщения, используя свои данные и методы своего класса.
</div>
<div class="quote">
"В мире ООП все состоит из объектов!"
</div>
<center><img src="images/binder_slide3.png" width=30%></center>
<h2>Принципы ООП</h2>
<center><img src="images/binder_principles.png" width=35%></center>
<h3>Инкапсуляция</h3>
<center><img src="images/binder_slide4.png" width=40%></center>
<div class="sl1">
Инкапсуляция - это свойство системы, позволяющее объединить данные и методы, работающие с ними, в один класс, и скрыть детали реализации от пользователя, что защищает и то, и другое от внешнего вмешательства или неправильного использования. Класс - это то, что поддерживает инкапсуляцию.

Таким образом, можно выделить ряд основных преимуществ инкапсуляции в объектно-ориентированном подходе:
<ul type="none">
<li>
1. Надежность данных. Можно предотвратить изменение элемента данных, выполнив в свойстве (методе) дополнительную проверку значения на допустимость. Тем самым можно гарантировать надежное состояние объекта.<br>
</li><li>
2. Целостность ссылок. Перед доступом к объекту, связанному с данным объектом, можно удостовериться, что косвенное поле (часть данных объекта) содержит корректное значение (ссылку на экземпляр).<br>
</li><li>
3. Предусмотренные побочные эффекты. Можно гарантировать, что каждый раз, когда выполняется обращение к полю объекта, синхронно с ним выполняется какое-либо специальное действие.<br>
</li><li>
4. Сокрытие информации. Когда доступ к данным осуществляется только через методы, можно скрыть детали реализации объекта. Позднее, если реализация изменится, придется изменить лишь реализацию методов доступа к полям. Те же части программы, которые использовали этот класс, не будут затронуты.<br>
</li>
</ul>
<center><img src="images/binder_slide5.png" width=40%></center>
</div>
<hr color=white>
<h3>Наследование</h3>
<center><img src="images/binder_nasl.png" width=50%></center>
<div class="sl1">
Наследование - это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс - потомком, наследником, дочерним или производным классом. Наследование позволяет построить иерархию классов - единую древовидную структуру с общим корнем, и дает возможность определения новых классов на основе существующих с возможностью добавления или переопределения данных и методов.
</div>
<div class="quote">
Большинство классификаций, по сути своей, есть наглядный пример наследования классов
</div>
<center><img src="images/binder_nasl.png" width=50%></center>
<hr color=white>
<h3>Полиморфизм</h3>
<div class="sl1">
Полиморфизм - это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.

В более общем смысле, концепцией полиморфизма является идея "один интерфейс, множество методов", которая выражается в том, что под одним и тем же именем скрываются различные действия, содержание которых зависит от типа объектов. Это означает, что можно создать общий интерфейс для группы близких по смыслу действий. Преимуществом полиморфизма является то, что он помогает снижать сложность программ, разрешая использование того же интерфейса для задания единого класса действий.
</div>
<div class="quote">
Наиболее понятным примером полиморфизма может быть знакомая нам функция abs() при одном и том же имени функция работает с разными типами переменных по╜разному
</div>
<center><a href = http://mephisto.ccfit.nsu.ru/~binder/oopload.php>Скачать презентацию</a></center>
</body>
</html>
