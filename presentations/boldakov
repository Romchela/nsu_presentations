<body>
<div id = 'BoldakovPage'>
<div id = 'BoldakovNews'>
<div align = 'center'><h4>Язык структурирования и представления информации HTML5</h4></div>
В этой статье я расскажу вам о новых возможностях, которые подарил нам новый стандарт HTML. <img src = "images/Boldakov1.png" style='width: 128px; height:128px;'>
<p>В первую очередь, я хотел бы упомянуть об изначальном предназначении HTML, как языка гипертекстовой разметки.</p>
<p>Следующим шагом стоит сказать о первой причине появления нового стандарта - мультимедия в интернете.</p>
<p>И наконец ознакомимся с конкретным и практичным нововведением HTML5 - тегом "canvas"</p>
<p>Итак, приступим. Я не думаю, что существует особая потребность многословно распространяться о предназначении HTML, во-первых, потому что все это хорошо известно широкой публике, а, во-вторых, Википедия, как-никак, всегда под рукой.</p>
<img src = "images/Boldakov2.png" style='width: 256px; height:256px;'><p>Поэтому буду краток: HTML - язык гипертекстовой разметки. Ну, или по-простому: HTML - это та "штука", которая дает нам возможность клацать на ссылки и переходить на разные страницы. Как, я надеюсь, вы уже успели оценить, вещь весь и весьма удобная. И еще одной важной и неотъемлемой составляющей HTML испокон веков является возможность форматирования текстов, т. е. представлять тексты в более приятном человеческому глуазу виде: с абзацами, заголовками и т. д.</p>
<p>И все было бы прекрасно и в доработках не нуждалось бы. Если бы не рост скорости интернет соединений и не желания пользователей заиметь у себя на странице как можно больше разнообразного мультимедиа контента, а главным образом: видео - контента. Казалось бы в чем может возникнуть проблема? А в том, что до HTML5 браузеры не имели никакой возможности принимать и просматривать видео, используя свои собственные нативные средства, что вело за собой непременное появления разных плагинов для просмотра видео: Flash - player, Silverlight, QuickTime player. Эти плееры, конечно, решают проблему просмотра видео, но они зависимы от ОС + требуют дополнительной установки сверху браузера. И было бы замечательно этого избежать, не считаете? Как было бы замечательно иметь способ воспроизвести видео нативными средствами?</p>
<p>И HTML5 решает эту проблему! Он дает вам возможность воспроизвести видео, поддерживаемое вашей платформой и с соответствующими кодировками на вашем устройстве. Введя тег "video" разработчики подарили нам, пользователям интернета, свободу от нашествия плагинов,  теперь мы можем наслаждаться видео с YouTube без Flash-player'a или чего бы то ни было еще.</p>
<p>наконец мы добрадись до, довольно-таки, насущной и практичной вещи, как "canvas". "Canvas" возволяет вам отрисовывать, буквально все, что вы захотите на экране вашего браузера: спрайты, изображения, при особом желании даже 3D-графику! Но это еще не все, вы так же сможете изменять вашу графику так, как вам заблагорассудиться, используя JavaScript. Для начала на потрубуется создать сам тег "canvas""/canvas", где " заменить на <>, соответственно. И написать в консоли простой скрипт var canva = document.getElementById("can");
var canva_cont = canva.getContext("2d");
canva_cont.fillRect(50, 50, 55, 200); И вы собственными руками выведите на экран свой, может быть, первый черный прямоугольник!</p>
<img src = "images/Boldakov3.png" style='width: 256px; height:256px;'>
<p> Еще, мне кажется, стоит обратить внимание на возможность обработки изображения в canvas.
Одна из примечательных особенностей Canvas заключается в том, что эта технология обеспечивает попиксельный доступ к отображаемым данным и позволяет проектировать на холст различные графические элементы, включая видео.
Хорошим примером того, где это нужно, являюется задача обработки/анализа изображений.
<img src = "images/Boldakov4.png"></p>

<P>Анализ видео</p>
<p>
Давайте посмотрим, как с помощью Canvas можно заниматься обработкой видео. Начнем с простой задачи проектирования видео-контента на canvas-элемент.
<p>
<? $s = htmlspecialchars('<div id="canvasholder">
<canvas width="320" height="200" class="thumb" id="myCanvas">
</div>
<video id="myVideo" width="320" height="200" src="video/gizmo.mp4" controls>
Для решения этой задачи в Canvas есть специальный метод drawImage:

var video = document.getElementById("myVideo");
var ctx = document.getElementById("myCanvas").getContext("2d");

setInterval(function() {
    ctx.drawImage(video, 0,0, 560, 320, 0, 0, ctx.canvas.width, ctx.canvas.height);
}, 67);', ENT_QUOTES);
echo "$s"?>
</p>
Если запустить проигрывание видео, изображение внутри canvas-элемента будет обновляться синхронно с обновлением видео:

Теперь, из canvas-элемента можно получить доступ к отдельным пикселям видео-изображения. Для этого мы проектирование видео перенесем на промежуточный canvas, хранящийся в памяти. Чтобы получить доступ к пикселям и записывать пиксели в canvas есть соответствующие методы getImageData и putImageData.

<p>var video = document.getElementById("myVideo");
var ctx = document.getElementById("myCanvas").getContext("2d");
var canvasTemp = document.createElement("canvas");
canvasTemp.width = 320;
canvasTemp.height = 200;
var ctxTemp = canvasTemp.getContext("2d");

setInterval(function() {
    ctxTemp.drawImage(video, 0,0, 560, 320, 0, 0, ctx.canvas.width, ctx.canvas.height);
    var pixels = ctxTemp.getImageData(0,0, ctx.canvas.width, ctx.canvas.height);
    for (var i=0, n = pixels.data.length; i < n; i+= 4) {
        pixels.data[i+0] = 255 - pixels.data[i+0];
        pixels.data[i+1] = 255 - pixels.data[i+1];
        pixels.data[i+2] = 255 - pixels.data[i+2];
    }
    ctx.putImageData(pixels, 0, 0);
}, 67);
</p>
В качестве примера обработки видео-изображения в данном случае делается инверсия цвета пикселей по каждому из цветовых каналов.</p>
<p>Таким образом новый HTML5 открывает нам возможности для создания ограниченного только вашей фантазией простора мультимедийных приложений! Что не может не радовать, ведь web становится ярче ч кажым новым днем!</p>
<p>При подготовке этой сттатьи использовались следующие саайты: wikipedia.org, habrahabr.ru, htmlbook.ru.</p>
</div>
</div>
