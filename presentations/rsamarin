	            <font size="8" face="airport"><center>Http протокол. Его использование с примерами.</center></font>

					
					

<br>
<br>


<center>
<dl class="spoiler">
<dt><center>Что это такое?</center></dt>
<dd>HTTP (англ. HyperText Trans<hfer Protocol — «протокол передачи гипертекста») — протокол прикладного уровня передачи данных. Используется сейчас повсеместно, преимущественно браузерами, но не только.
Позволяет устроить связку клиент-сервер быстро и просто, давно уже обкатан, имеет возможности для расширения, а так же простую структуру, понятную человеку.<br>
<IMG SRC="http://aabramoff.ru/wp-content/uploads/2013/05/HTTP-wallpaper.jpg" NAME="HARDCORNIE POCANI" WIDTH=680 HEIGHT=510 BORDER=0></dd>
</dl></center>
<center>
<dl class="spoiler">
<dt><center><h2>Как и зачем?</h2></center></dt>
<dd>Предположим, что Вы открыли браузер, и решили посетить какую-то веб страничку, например ya.ru. Вы вбиваете ее адрес, дальше браузер делает следующие нехитрые манипуляции:<br>
1.Обращается к DNS-серверу, прописанному у вас в конфиге, или полученному автоматически.<br>2.После получения адреса сервера, где лежит страница формирует нехитрый запрос, в котором описывается стартовая строка, заголовки, и тело сообщения.<br>
3.Бросает запрос на уже найденный адрес по указанному порту(по стандарту - 22).<br> В ответ сервер вернет ему сгенерированную страничку, используя подобный запрос с описанием, заголовками и телом. Дальше браузер его распарсит, и покажет Вам.</dd>
</dl></center>
<center>
<dl class="spoiler">
<dt><center><h2>Пример запроса.</h2></center></dt>
<dd><IMG SRC="http://puu.sh/dg5ZT/caaa48dd94.png" NAME="HARDCORNIE POCANI" WIDTH=680 HEIGHT=170 BORDER=0>
На скриншоте показан вышеописанный пример. В первой строке, которая является обязательной описывается тип запроса, адрес хоста (в данном случае он "/", поскольку полный путь описан ниже в заголовке) и версия протокола.
Ниже идет пачка различных заголовков, описывающих тип соединения и передачи данных. Тела запроса нету, но в данном случае оно и не нужно. Давайте разберем типы запросов.
</dd>
</dl></center>
<center>
<dl class="spoiler">
<dt><center><h2>GET-запрос</h2></center></dt><dd>
Используется для запроса содержимого указанного ресурса. С помощью метода GET можно также начать какой-либо процесс. В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса.
Клиент может передавать параметры выполнения запроса в URI целевого ресурса после символа «?»:
<IMG SRC="http://puu.sh/dg6K4/e4c6a2d389.png" NAME="HARDCORNIE POCANI" WIDTH=433 HEIGHT=23 BORDER=0></dd>
</dl></center>
<center>
<dl class="spoiler">
<dt><center><h2>POST-запрос.</h2></center></dt>
<dd>Применяется для передачи пользовательских данных заданному ресурсу. Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются серверу методом POST и он помещает их на страницу. При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса. Аналогично с помощью метода POST обычно загружаются файлы на сервер.</dd>
</dl></center>
<center>
<dl class="spoiler">
<dt><center><h2>Заголовки</h2></center></dt>
<dd>Заголовков - великое множество, но в общем и целом можно разделить их на три группы:<br> General Headers - обычно описывающие тип запроса, используются в запросах и ответах.<br>
Request Headers - заголовки запросов.<br>Response headers - заголовки ответов.<br> За полным списком необходимо обратиться к вики/гуглу, т.к. общепринятых заголовков порядка 50 штук.</dd>
</dl></center>
<center>
<dl class="spoiler">
<dt><center><h2>Ответы от сервера.</h2></center></dt>
<dd>Ответ от сервера является таким же запросом, за малым исключением: в 1-й строке, заместо элемента host используется числовой код ответа. Их тоже достаточно много, но их опять же можно разделить на группы:
<br><br>1xx Informational («Информационный») <br>
В этот класс выделены коды, информирующие о процессе передачи. В HTTP/1.0 сообщения с такими кодами должны игнорироваться. В HTTP/1.1 клиент должен быть готов принять этот класс сообщений как обычный ответ, но ничего отправлять серверу не нужно.
<br><br> 2xx Success («Успех») <br>
Сообщения данного класса информируют о случаях успешного принятия и обработки запроса клиента. В зависимости от статуса сервер может ещё передать заголовки и тело сообщения.
<br><br>3xx Redirection («Перенаправление») <br>
Коды класса 3xx сообщают клиенту что для успешного выполнения операции необходимо сделать другой запрос (как правило по другому URI).
<br><br>4xx Client Error («Ошибка клиента»)<br>
Класс кодов 4xx предназначен для указания ошибок со стороны клиента. При использовании всех методов, кроме HEAD, сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя.
<br><br>5xx Server Error («Ошибка сервера»)<br>
Коды 5xx выделены под случаи неудачного выполнения операции по вине сервера. Для всех ситуаций, кроме использования метода HEAD, сервер должен включать в тело сообщения объяснение, которое клиент отобразит пользователю.
</dd>
</dl></center>
<center>
<dl class="spoiler">
<dt><center><h2>Источники</h2></center></dt>
<dd>Педивикия<br>Хабр<br>Голова<br></dd>
</dl></center>
