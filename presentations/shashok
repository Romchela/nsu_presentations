<center><img src="http://savepic.su/4529463.png" vspace="15" hspace="30"></center>
<p><font align=center size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;"> Git-репозиторий</font> <img src="http://savepic.su/4586806.jpg" align="left" vspace="15" hspace="30"> </p>
<p> <font style="text-decoration:underline;">Git</font> - распределенная система управления файлов. Проект был создан Линусом Торвальдсом для управдления разработкой ядря Linux, первая версия выпущена 7 апреля 2005 года. Примерами проектов, использующих Git, являются ядро Linux, Android, PHP и некоторые дистрибутивы Linuxю Программа является свободной и выпущена под лицензией GNU GPL.</p> <p> Система спроектирована как набор программ, специально разработанных с учётом их использования в скриптах. Это позволяет удобно создавать специализированные системы контроля версий на базе Git или пользовательские интерфейсы.</p>
    <p> Удалённый доступ к репозиториям Git обеспечивается git-daemon, SSH- или HTTP-сервером. TCP-сервис git-daemon входит в дистрибутив Git и является наряду с SSH наиболее распространённым и надёжным методом доступа. Метод доступа по HTTP, несмотря на ряд ограничений, очень популярен в контролируемых сетях, потому что позволяет использовать существующие конфигурации сетевых фильтров.</p> 
<p><font align=center size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;">Плюсы и минусы GIT в сравнении с SVN</font> </p>
	  <ul>
	    <li> Git гораздо быстрее Subversion;
		<li> Git репозиторий в десятки раз компактней репозиториев Subversion;
		<li>Git с самого начала разрабатывался как распределённая система контроля, позволяющая каждому разработчику иметь полный локальный контроль над репозиторием;
<li>Ветки (branches) в Git гораздо легче и работают значительно быстрее;
<li><b>Все локально</b>- репозиторий, история, ветки и коммиты. Отсюда вытекает 2 важных следствия: все очень быстро, и второе, вы получаете абсолютный контроль над репозиторием;
<li><b>GitHub</b> - платформа, где можно бесплатно разместить и опубликовать свой репозиторий. Бесплатно для открытых проектов и 200 руб/мес, чтобы закрыть доступ.
	  </ul>
	 </p>
	 <p> Однако:
	   <ul>
	     <li> Отсутствуют переносимые на другие операционные системы поддержки путей в кодировке Unicode в Microsoft Windows. Если путь содержит символы, отличные от ANSI, то их поддержка из командной строки требует специфических настроек, которые не гарантируют правильного отображения файловых имён при пользовании тем же репозиторием из других ОС;
		 <li> Git неудобен для пользователей, переходящих с других VCS;
		 <li> Git Использует для идентификации ревизий хэшей SHA1, что приводит к необходимости оперировать длинными строками вместо коротких номеров версий, как во многих других системах;
<li>Большие накладные расходы при работе с проектами, в которых делаются многочисленные несвязанные между собой изменения файлов. При работе в таком режиме размеры наборов изменений становятся достаточно велики и происходит быстрый рост объёма репозиториев.
   </ul> </p>
	<p> <font align="center" size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;"> GitHub</font> </p> <br>
<center><img src="http://savepic.su/4565302.jpg" vspace="15" hspace="30"></center>
	<p> Cайт github.com позиционируется как веб-сервис хостинга проектов с использованием системы контроля версий git, а также как социальная сеть для разработчиков. Пользователи могут создавать неограниченное число репозиториев, для каждого из которых предоставляется wiki, система issue tracking-а, есть возможность проводить code review и многое другое. GitHub на данный момент является самым популярным сервисом такого рода, обогнав Sourceforge и Google Code.
	</p>
    <p> <font align=center size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;">Внутреннее устройство Git</font> </p>
	<p> В Git единицей хранения данных является объект (англ. object), который однозначно определяется 40-символьным хешем sha1. В объектах Git хранит почти всё: коммиты, содержимое файлов, их иерархию. Объекты представляют из себя обычные файлы в папке .git/objects. Для экономии дискового пространства содержимое всех объектов дополнительно сжимается с помощью zlib.<img src="http://savepic.su/4553014.png" align="right" vspace="5" hspace="10"> </p>
	<p> Узнать тип объекта можно, набрав <font style="text-decoration:underline;">git cat-file -t sha1.</font></p>
<p> <font align=center size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;"> Основные типы объектов </font> </p>
	<p> <ul>
    <li>  <b><i>BLOB (содержимое файла)</b></i>. В объектах типа BLOB содержится длина содержимого файла и само содержимое. Ничего больше: ни имени файла, ни прав доступа там нет.

		<li> <b><i>Tree (иерархия ФС)</i></b>. В объекте типа дерево (англ  tree) хранится список записей, который соответствует иерархии файловой системы. Одна запись представляет из себя следующее: права файла|тип объекта|sha1 объекта|имя файла. Права файла в Git могут иметь лишь очень ограниченный набор значений: <b>040000</b> - директория; <b>100644</b> - обычный файл; <b>100755</b> - файл с правами исполнения; <b>120000</b> - символическая ссылка. 
		<li><b><i>Commit</i></b>. В Git один коммит (англ. сommit) представляет из себя ссылку на объект tree, соответствующий корневой директории, и ссылку на родительский коммит (кроме самого первого коммита в репозитории). Также в коммите есть информация об авторе и времени создания.
<li><b><i>Pack-файлы</b></i>. Если бы Git действительно хранил все объекты целиком (хоть и сжатые), папка .git представляла бы из себя огромный набор файлов, причем их бы было гораздо больше, чем в рабочей копии. Тем не менее этого не происходит, а появляются pack-файлы, в которые упакованы объекты. Если кратко, то в pack-файлах объекты группируются по схожести (например, тип и размер), после чего они сохраняются в виде цепочек. Самые новые версии объекта считаются наиболее запрашиваемыми, поэтому они хранятся выше в цепочке.
	  </ul></p>
 <p> <font align=center size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;">Создание Git-репозитория</font> </p>
<p>Для создания Git-репозитория существуют два основных подхода. Первый подход . импорт в Git уже существующего проекта или каталога. Второй . клонирование уже существующего репозитория с сервера.
<br>
<br>
<b>Создание репозитория в существующем каталоге</b><br>
<br>
<img src="http://savepic.su/4533614.jpg" align="left" vspace="15" hspace="30"> Eсли вы собираетесь начать использовать Git для существующего проекта, то вам необходимо перейти в проектный каталог и в командной строке ввести<br>
<center><b>$ git init</b></center><br>
Эта команда создаёт в текущем каталоге новый подкаталог с именем .git, содержащий все необходимые файлы репозитория - основу Git-репозитория.<br>
Если вы хотите добавить под версионный контроль существующие файлы (в отличие от пустого каталога), вам стоит проиндексировать эти файлы и осуществить первую фиксацию изменений. Осуществить это вы можете с помощью нескольких команд git add, указывающих индексируемые файлы, а затем commit:<br>
<b>$ git add *.c </b><br>
<b>$ git add README </b><br>
<b>$ git commit -m 'initial project version'</b><br><br>
<b>Клонирование существующего репозитория</b><br><br>
Если вы желаете получить копию существующего репозитория Git, например, проекта, в котором вы хотите поучаствовать, то вам нужна команда <b>git clone.</b>
Клонирование репозитория осуществляется командой <b>git clone [url]</b>. Например, если вы хотите клонировать библиотеку Ruby Git, известную как Grit, вы можете сделать это следующим образом:<br>
<center><b>$ git clone git://github.com/schacon/grit.git</b></center><br>
Если вы хотите клонировать репозиторий в каталог, отличный от grit, можно это указать в следующем параметре командной строки:<br>
<center><b>$ git clone git://github.com/schacon/grit.git mygrit</b></center><br> 
Эта команда делает всё то же самое, что и предыдущая, только результирующий каталог будет назван mygrit.</p>

<p> <font align=center size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;">Интересные возможности Git</font> </p>
<p>
 <ul>
             <li>Tags - позволяют именовать и быстро находить конкретные коммиты и не замусоривать список веток;
                 <li> Stash - место, куда можно временно припрятать текущие изменения. Git не даст вам переключиться на другую ветку, если вы не сохранили текущие изменения. Если же вы не хотите по какой-либо причине делать коммит, то можете отложить их в stash, а потом забрать. Работает как стек. Полезно, если вы ошиблись текущей веткой и начали делать в ней изменения;
                 <li> Bisect - Последовательное переключение коммитов для выявления ломающего коммита. Если вы обнаружили какую-либо проблему по прошествии нескольких недель, месяцев, лет, то найти ломающее изменение становится нетривиальной задачей;
<li>Cherry pick - Команда, позволяющая забрать изменения из другого коммита. В рабочий код вносятся только изменения из другого коммита;
<li>Revert commit - допустим, вы хотите отменить изменения, внесённые каким-то коммитом. Выполните для него команду <i>revert commit</i>. С самим коммитом ничего не произойдёт, но в рабочую копию кода будут внесены изменения, отменяющие изменения этого коммита;
<li>Recover lost objects - если вы удалите метку с коммита, на который больше нет никаких ссылок, то этот коммит исчезнет, но не бесследно. 
</ul></p>

<p> <font align=center size=5 face="Arial Black" style="margin:15; font-weight:750; font-style:oblique;">Некоторые команды Git:</font> </p>
<center><img src="http://savepic.su/4568416.png"></center>
<a href="http://mephisto.ccfit.nsu.ru/~shashok/talk/Git.pptx"> Больше информации в презентации про Git!</a>