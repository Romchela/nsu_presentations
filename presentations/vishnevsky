<h1>Python</h1>	In university we had to make a presenteation on computer topic. I talked about programming language Python. I tried to give to my classmates some information about Python. There are some history facts, facilities using this language and problems in this project.
		<br><br><center><img src = "http://www.codeinstitute.net/wp-content/uploads/2014/10/python-logo.png" width = 400></center><br>

	Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed.
<br><br><br>
<center><img src = "http://sandeeps.in/_images/python-vs-java.jpg" width = 400></center>
<br>
	Often, programmers fall in love with Python because of the increased productivity it provides. Since there is no compilation step, the edit-test-debug cycle is incredibly fast. Debugging Python programs is easy: a bug or bad input will never cause a segmentation fault. Instead, when the interpreter discovers an error, it raises an exception. When the program doesn't catch the exception, the interpreter prints a stack trace. A source level debugger allows inspection of local and global variables, evaluation of arbitrary expressions, setting breakpoints, stepping through the code a line at a time, and so on. The debugger is written in Python itself, testifying to Python's introspective power. On the other hand, often the quickest way to debug a program is to add a few print statements to the source: the fast edit-test-debug cycle makes this simple approach very effective.

<h3>Advantages of any modern interpreted language. </h3>
Like any tradeoff, these are advantages in some situations and disadvantages in others. Situations where you don't want these conveniences are becoming more rare, though, as hardware gets even faster and high-level language implementations get even more efficent. 
<br><br><b>No compile step.</b> Write your code in my_program.py, then run it with python my_program.py.<br><br>
<b>No memory management.</b> You don't have to explicitly allocate memory for new variables, and you don't have to explicitly free memory you're done with. The interpreter will allocate memory for you and free it when it's safe to do so.<br><br>
<b>High-level native data types.</b> Strings, tuples, lists, sets, dictionaries, file objects and more are built-in. As an example, {"x": "y"} defines a dictionary (hash table) with string "x" as a key and string "y" as its value.
<br><br><center><img src = "http://pytalent.zandstrasystems.com/HelloW-3.gif"></center>
<h3>Specific advantages of Python:</h3>
<b>Especially clean, straightforward syntax.</b> This is a major goal of the Python language. Programmers familiar with C and C++ will find the syntax familiar yet much simpler without all the braces and semicolons.
<br><br>
<b>Duck typing.</b> If an object supports .quack, go ahead and call .quack on it without worrying about that object's specific type.
<b>Iterators, generators and comprehensions. </b>
<br>
This iterates over the file only once.
(These particular features are just the tip of the iceberg of simple built-in syntax for high-level language features. Check out decorators next if you're intrigued.)
<br><br><b>Huge standard library.</b> Just to pick some random examples, Python ships with several XML parsers, csv & zip file readers & writers, libraries for using pretty much every internet protocol and data type, etc.
<br><br><b>Great support for building web apps.</b> Along with Ruby and JavaScript, Python is very popular in the web development community. There are several mature frameworks and a supportive community to get you started.
<br><br>
<u>You can download this presentaion <a href = "http://mephisto.ccfit.ru/~vishnevsky/talk/Python.ppt" download>here</a>.</u>
	

