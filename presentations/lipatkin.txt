Архитектура ЭВМ
lipatkin

<!DOCTYPE HTML>

<html><head>
		<title>Архитектура ЭВМ</title>
		<meta http-equiv="Content-Type" content="text/html;
charset=UTF-8">
		<meta name="description" content="<?=$header_metaD?>">
		<meta name="keywords" content="<?=$header_metaK?>">
		<link rel="stylesheet" href="style_nei.css" type="text/css">
	</head>
	<body>

		<h1>Архитектура ЭВМ</h1>
		<h2>Принципы фон Неймана и их роль в становлении
информационных технологий</h2>
		<hr>

		<!-- <?=$txt?> -->
		
		<!--<div id = "menu">
			<ul>
				<li><a href = "#">Волейбол</a></li>
				<li><a href = "#">Архитектура ЭВМ</a></li>
				<li><a href = "#">FAQ</a></li>
			</ul>
		</div>-->

		<div id="text">
			<h3>Вступление</h3>
			<img class="img_type1" src="image/black_box.jpg"
align="right">
			<p>
				Мы живём в такое время, когда всё быстро
меняется. Всего полвека назад появилась вычислительная машина, потом она стала
значительно уменьшаться, пока не превратилась в персональный компьютер. Но
оказалось, что это ещё не всё. Эта мощная, но в то же время компактная машина
теперь умешается в устройство с размером в руку. И вот мы сейчас пользуемся
этими новшествами, но далеко не все знают, что скрывается за чёрным экраном
смартфона и ПК. Но ещё меньше людей знают, как там всё это устроено. Так вот,
я берусь объяснить, какая суть заложена в компьютере, как абстрактно он
устроен внутри.
			</p>

			<img class="img_type1" src="image/binary.jpg"
align="right">
			<p>
				Есть два вида компьютеров: <b>аналоговые</b>
(делающие вычисления взависимости изменения физических величин, таких как
напряжение) и <b> цифровые</b> (работающие с данными, представленными в
двоичном виде). Так вот, мы будем рассматривать именно цифровые компьютеры,
потому что как раз они находятся у нас дома и в кармане.
			</p>
			<p class="gap">		<!--Для разрыва-->

			</p><h3>Архитектура</h3>
			<img class="img_type2" src="image/architecture.png"
align="left">
			<p>
			Архитектура ЭВМ (Электронно-Вычислительная Машина)
включает в себя как структуру, отражающую состав ПК, так и
программно-математическое обеспечение (ПО). ПО - это различные программы,
языки программирования, операционные системы и т.п. Про ПО мы говорить не
будем. Нас интересует структура ЭВМ - совокупность элементов и связей между
ними. Что же это за элементы и связи? <br>
			</p>
			<p class="gap">		<!--Для разрыва-->

			</p><h3>Из чего же состоит компьютер?</h3>

			<img class="img_type1" src="image/structure.png"
align="right">
			<p style="clear: left">
				Рассмотрим составляющие компьютера:
				</p><ol>
					<li>Память</li>
					<li>Арифметико-логическое устройство
(АЛУ)</li>
					<li>Устройство управления (УУ)</li>
					<li>Устройства ввода - вывода
(УВВ)</li>
				</ol>
			<p></p>
			
			<p>
				<b>Память</b> представляет собой устройство,
способное принимать информацию, хранить и в случае необходимости (когда
определённое устройство даёт запрос на получение информации) выдавать.
			</p>
			
			<img class="img_type2" src="image/matplata.jpg"
align="left">

			<p>
			<b>Арифметико-логическое устройство (АЛУ)</b>, следуя
из названия, выполняет арифметические (сложение, умножение, деление) и
логические операции (логическое "И", "ИЛИ", "НЕ", импликация<sup><a
href="#con1">[1]</a></sup>). Т.е. в нашем понимании это некий калькулятор.
			</p>
			<p>
				<b>Устройство управления (УУ)</b> занимается
выполнением программ и координацией работы остальных устройств. Т.е. УУ - это
"мозг" компьютера. Вдобавок, УУ имеет своё личное хранилище данных, под
названием <b>Оперативное Запоминающее Устройство (ОЗУ)</b>. (Зачем УУ ещё одно
место для хранения данных?<sup><a href="#con2">[2]</a></sup>)
			</p>
			<p>
				<b>Устройство ввода-вывода (УВВ)</b> позволяет
компьютеру принимать данные (устр. ввода) и представлять в понятной для
пользователя форме (устр. вывода). Устройства ввода: клавиатура, мышь, сканер
и т.д. Устройства вывода: монитор, принтер, аудиоколонки и т.д.
			</p>
			
			<p>
				И все эти вышеперечисленные компоненты
компьютера соединены <b>каналами связи</b>.
			</p>

			<p style="padding-top: 20px">
				Для того чтобы начать рассматривать
архитектуру фон Неймана, нужно узнать ещё пару терминов:
			</p>

			<p>
				<b>Команда</b> - это описание элементарной
операции, которую должен выполнить компьютер. Т.е. команда - это имя
"действия", которое которое выполняется АЛУ или УУ (смотря, что за команда).
Команда должна включать ещё операнды (т.е. с чем ей работать, над чем
выполнять наше "действие") и указание место, куда класть результат. Например
сложение двух чисел. 
			</p>
			<p>
				<b>Регистр</b> выполняет функцию
кратковременного хранения числа или команды<sup><a href="#con3">[3]</a></sup>.
Некоторые из них:
				</p><ul>
					<li><b>Cумматор</b> - регистр АЛУ,
участвующий в выполнении каждой операции;</li>
					<li><b>Cчетчик команд</b> - регистр
УУ, содержимое которого соответствует адресу очередной выполняемой команды;
служит для автоматической выборки программы из последовательных ячеек
памяти;</li>
					<li><b>Регистр команд</b> - регистр УУ
для хранения кода команды на период времени, необходимый для ее выполнения.
Часть его разрядов используется для хранения кода операции, остальные - для
хранения кодов адресов операндов.</li>
				</ul>
			<p></p>

			<p>Давайте посмотрим, как выполняется команда в
компьютере.</p>

			<h3>Выполение команды</h3>

			<img class="img_type3" src="image/execute_prog1.png"
align="right">
			<p>
				</p><ol>
					<li>Из ПЗУ загружается программа в
ОЗУ</li>
					<li>В специальный регистр, под
названием .счётчик команд., записывается адрес первой команды</li>
					<li>УУ считывает эту команду и
записывает в так называемый регистр команд</li>
					<li>Процессор определяет операцию
команды (что она вообще делает эта команда)</li>
					<li>Потом как бы "отмечает" данные,
которые нужны для выполнения команды, и контролирует выполнение команды.</li>
				</ol>
				Операцию выполняет АЛУ или аппаратные средства
компьютера.
			<p></p>

			<img class="img_type3" src="image/execute_prog2.png"
align="right">

			<p>Например, есть команда сложения двух чисел. На
рисунке представлены две ячейки памяти. Из них загружаются данные в регистры
АЛУ, происходит сложение и запись в аккумулятор (т.е. регистр, который
содержит результаты выполнения арифметических операций). Результат операции
либо остается в процессоре, либо отправляется в память, если в команде был
указан адрес результата. Все предыдущие этапы повторяются до достижения
команды "стоп".</p>

			<p>Теперь мы готовы.</p>

			<p class="gap">		<!--Для разрыва-->
			</p><p class="gap">		<!--Для разрыва-->


			</p><h3>Принципы фон Неймана</h3>
			<p>
				В основу построения подавляющего большинства
компьютеров положены следующие общие принципы, сформулированные в 1945 г.
американским ученым Джоном фон Нейманом.
			</p>

			<img class="img_type2" src="image/neumann.jpg"
align="left">

			<p>
				<b>1. Принцип программного управления.</b> Из
него следует, что программа состоит из набора команд, которые выполняются
процессором автоматически друг за другом в определенной последовательности.
			</p>

			<p>
				Выборка программы из памяти осуществляется с
помощью счетчика команд. Этот регистр процессора последовательно увеличивает
хранимый в нем адрес очередной команды на длину команды.
			</p><p>

			</p><p>
				А так как команды программы расположены в
памяти друг за другом, то тем самым организуется выборка цепочки команд из
последовательно расположенных ячеек памяти.
			</p>
			
			<p>Если же нужно после выполнения команды перейти не к
следующей, а к какой-то другой, используются команды условного или
безусловного переходов, которые заносят в счетчик команд номер ячейки памяти,
содержащей следующую команду. Выборка команд из памяти прекращается после
достижения и выполнения команды "стоп".
			</p>

			<p>Таким образом, процессор исполняет программу
автоматически, без вмешательства человека.</p>

			<p><b>2. Принцип однородности памяти.</b> Программы и
данные хранятся в одной и той же памяти. Поэтому компьютер не различает, что
хранится в данной ячейке памяти - число, текст или команда. Над командами
можно выполнять такие же действия, как и над данными. Это открывает целый ряд
возможностей. Например, программа в процессе своего выполнения также может
подвергаться переработке, что позволяет задавать в самой программе правила
получения некоторых ее частей (так в программе организуется выполнение циклов
и подпрограмм). Более того, команды одной программы могут быть получены как
результаты исполнения другой программы. На этом принципе основаны методы
<em>трансляции</em> - перевода текста программы с языка программирования
высокого уровня на язык конкретной машины.
			</p>

			<p><b>3. Принцип адресности.</b> Структурно основная
память состоит из перенумерованных ячеек; процессору в произвольный момент
времени доступна любая ячейка. Отсюда следует возможность давать имена
областям памяти, так, чтобы к запомненным в них значениям можно было
впоследствии обращаться или менять их в процессе выполнения программ с
использованием присвоенных имен.
			</p>

			<p>Компьютеры, построенные на этих принципах,
относятся к типу <b>фон-неймановских</b>. Но существуют компьютеры,
принципиально отличающиеся от фон-неймановских. Для них, например, может не
выполняться принцип программного управления, т.е. они могут работать без
счетчика команд, указывающего текущую выполняемую команду программы. Для
обращения к какой-либо переменной, хранящейся в памяти, этим компьютерам не
обязательно давать ей имя. Такие компьютеры называются
<b>не-фон-неймановскими</b>.
			</p>

			<p class="gap">		<!--Для разрыва-->


			</p><h3>Есть ли другие архитектуры?</h3>
			<p>Ответ: да существуют. Но прежде чем привести
примеры таких архитектур, дадим более полное определение архитектуры
компьютеры:</p>
			<p>
				<strong>Архитектурой</strong> компьютера
называется его описание на некотором общем уровне, включающее описание
пользовательских возможностей программирования, системы команд, системы
адресации, организации памяти и т.д. Архитектура определяет принципы действия,
информационные связи и взаимное соединение основных логических узлов
компьютера: процессора, оперативного ЗУ, внешних ЗУ и периферийных устройств.
Общность архитектуры разных компьютеров обеспечивает их совместимость с точки
зрения пользователя.
			</p>

			<h3>Виды</h3>
			<img class="img_type4" src="image/command.gif"
align="left">
			<p><b><ins>1) Классическая архитектура (архитектура
фон Неймана)</ins></b> - одно арифметико-логическое устройство (АЛУ), через
которое проходит поток данных, и одно устройство управления (УУ), через
которое проходит поток команд - программа (рис.). Это однопроцессорный
компьютер. К этому типу архитектуры относится и архитектура персонального
компьютера с общей шиной. Все функциональные блоки здесь связаны между собой
общей шиной, называемой также системной магистралью.
			</p>

			<p>
				Физически <b>магистраль</b> представляет собой
многопроводную линию с гнездами для подключения электронных схем. Совокупность
проводов магистрали разделяется на отдельные группы: шину адреса, шину данных
и шину управления.
			</p>
	
			<img src="image/arch3.png" style="padding-right: 15px;
width: 350px; height: auto;" align="left">
			<p>
				<b><ins>2) Многопроцессорная
архитектура</ins></b>. Наличие в компьютере нескольких процессоров означает,
что параллельно может быть организовано много потоков данных и много потоков
команд. Таким образом, параллельно могут выполняться несколько фрагментов
одной задачи. Структура такой машины, имеющей общую оперативную память и
несколько процессоров, представлена на рис.
			</p>

			<p><b><ins>3) Многомашинная вычислительная
система</ins></b>. Здесь несколько процессоров, входящих в вычислительную
систему, не имеют общей оперативной памяти, а имеют каждый свою (локальную).
Каждый компьютер в многомашинной системе имеет классическую архитектуру, и
такая система применяется достаточно широко. Однако эффект от применения такой
вычислительной системы может быть получен только при решении задач, имеющих
очень специальную структуру: она должна разбиваться на столько слабо связанных
подзадач, сколько компьютеров в системе.
			
			Преимущество в быстродействии многопроцессорных и
многомашинных вычислительных систем перед однопроцессорными очевидно.</p>

			<img class="img_type4" src="image/arch4.png"
align="left">
			<p><b><ins>4) Архитектура с параллельными
процессорами</ins></b>. Здесь несколько АЛУ работают под управлением одного
УУ. Это означает, что множество данных может обрабатываться по одной программе
. то есть по одному потоку команд. Высокое быстродействие такой архитектуры
можно получить только на задачах, в которых одинаковые вычислительные операции
выполняются одновременно на различных однотипных наборах данных. Структура
таких компьютеров представлена на рис.
			</p>

			<p>В современных машинах часто присутствуют элементы
различных типов архитектурных решений. </p>

			<h3>Вывод</h3>

			<img class="img_type4" src="image/monkey_human.jpg"
align="left">
			<p>
			Вот так мы разобрали тему "Архитектура компьютера".
Для тех, кто хочет разобраться поподробнее на эту тему, я приведу список
источников внизу. А лучше посоветую прочитать книгу <b><em>Эндрю С. Таненбаума
"Ахритектура компьютера"</em></b>.</p>
			<p style="clear: left">
				</p><ul>
					<li><a
href="http://www.lessons-tva.info/edu/e-inf1/e-inf1-2-2.html">http://www.lessons-tva.info/edu/e-inf1/e-inf1-2-2.html</a></li>
					<li><a
href="http://inf1.info/machineneumann">http://inf1.info/machineneumann</a></li>
					<li><a
href="https://ru.wikipedia.org/wiki/Архитектура_компьютера">https://ru.wikipedia.org/wiki/Архитектура_компьютера</a></li>
					<li><a
href="https://ru.wikipedia.org/wiki/Архитектура_фон_Неймана">https://ru.wikipedia.org/wiki/Архитектура_фон_Неймана</a></li>
					<li><a
href="http://book.kbsu.ru/theory/chapter2/1_2.html">http://book.kbsu.ru/theory/chapter2/1_2.html</a></li>
					<li><a
href="http://solidbase.karelia.ru/edu/zonna/3_ychebnik_4.htm">http://solidbase.karelia.ru/edu/zonna/3_ychebnik_4.htm</a></li>
					<li><a
href="http://nsumedia.ru/study//NSU/ФИТ/Курсы/Общие/Современные проблемы
информатики/Лекции/07-culculator.pdf">http://nsumedia.ru/study//NSU/ФИТ/Курсы/Общие/Современные
проблемы информатики/Лекции/07-culculator.pdf</a></li>
				</ul>

			<p></p>

		</div>

		<div id="jump_up">
			<hr>
			<p>
				<a href="#">Наверх</a>
				<br>
				<a href="../../index.php">На главную
страницу</a>
				<br>
				<a href="1.pptx">Скачать презентацию</a>
			</p>
		</div>


		<div id="text">
			<ol>
				<li id="con1">Операция, возвращающая ложь
тогда и только тогда, когда в высказывании А следует Б, А - истинно, Б -
ложно. На уровне кода: 1 → 0 = 0.</li>	
				<li id="con2">У компьютера есть два места
хранения данных: <b>Постоянное запоминающие устройство (ПЗУ)</b> и <b>ОЗУ</b>.
Сходства: одинаково хранят данные (в двоичном виде). Различия. ПЗУ способен
хранить данные без источника тока (поэтому и так называется) и расположен
отдельно от УУ. ОЗУ хранит данные, пока включен компьютер. Расположен рядом с
УУ (на материнской плате). Чтение и запись данных быстрее производиться с ОЗУ,
чем с ПЗУ (из-за того, что ОЗУ находится на материнской плате). Вроде бы
возникает вопрос: почему нельзя всю память организовать на материнской плате?
Ответ: слишком дорогостоюще.<br>
			        Вдобавок так сложилось исторически, что одни
организации занимались ускорением процессора, а другие - увеличением объёма
памяти. И, соответственно, получилось: быстрый процессор, много памяти, НО
медленный доступ к этой памяти.	</li>
				<li id="con3">Как регистр может хранить
команду? Ответ: команда - это некое слово, записанное в двоичном виде. А
регистр может без проблем хранить двоичные числа.</li>

			</ol>
		</div>
	


</body></html>
