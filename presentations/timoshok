<div>

	<h1><p align="center"><b><u> Тема доклада: сжатие информации </b></u></p></h1>
	<h4>
	<p> Что же такое сжатие информации? Это алгоритмическое преобразование данных, при котором за счет уменьшения их избыточности уменьшается объём. Бывают разные типы информации, а следовательно нужно применять разные алгоритмы сжатия. Поэтому, я хотел бы рассказать отдельно о каждом типе цифровой информации и его способах сжатия по-отдельности.</p>
	<p> Основные типы информации в компьютере: текстовая, звуковая, графическая и видео.</p>
	<p>Существует две больших классификации методов сжатия: с потерями и без потерь. Попросту говоря, сжатие с потерями значит, что сжатый файл уже никак не вернуть к исходному виду, а без потерь . можно вернуть, соответственно.</p>
	<p>А теперь о сжатии каждого типа поподробнее. И да, я не буду перечислять все методы сжатия, дабы Вас сильно не утомлять, а лишь наиболее распространенные и эффективные.</p>
	<p><b><u>Текстовая информация</b></u> - информация, представленная в форме письменного текста. Мы встречаемся с ней каждый день, так как бОльшая часть информации в компьютере представлена как-раз-таки в текстовой форме. Хочется отметить, что  все методы сжатия текстовой информации являются примером сжатия без потерь.</p>
	<p>Наиболее распространенный и удобный тип сжатия текстовой информации называется .сжатие словарей.. Под словарями понимают списки неповторяющихся цепочек сим-волов в алфавитном или ином строгом порядке. Для данного типа используются отдельные перечни наиболее часто встречающихся частей слов (суффиксы, приставки), где каждой из них ставится в соответствие более короткий код, заменяющий её в словаре. </p>
	<p>Например, словарь: встречающийся, заменяющий. С помощью этого способа сжатия заменится на совокупность словарей:<br><br>
	1-	Ющий<br>

	встреча1ся <br>
	заменя1</p>
	<p>Когда составляющие словаря образуют сильно обособленные группы слов, можно разделить весь словарь на подсловари, и кодировать слова независи.мо в каждом из них кодами минимальной длины.</p>

	<p>Другой метод сжатия текстовой информации схож с предыдущим, но его основным отличаем является выявление общей (часто повторяющейся) части текста, и заменой во всех местах текста на более короткую кодировку. При этом если в тексте больше одной повторяющейся части, алгоритм выстроит части по частоте встречаемости и размеру. <br>
	Пример: Вот дом, который построил Джек. А это пшеница, которая в темном чулане хранится, в доме, который построил Джек. А это . веселая птица-синица, которая часто ворует пшеницу, которая в темном чулане хранится, в доме, который построил Джек.<br>
	1 = , которая в темном чулане хранится. <br>
	2 = в доме, который построил Джек.<br>
	Вот дом 2. А это пшеница 1, 2. А это . веселая птица-синица, которая часто ворует пшеницу 1, 2.<br><br>
	P.S. если вы знаете это стихотворение целиком, то нетрудно догадаться, что при таком постепенном .нагромождении. данный способ сжатия не просто эффективен, он не заменим!</p>
	<p><b><u>Графическая</b></u> информация в компьютере чаще всего представлена в виде каких-либо изображений. На следующих двух примерах я наглядно продемонстрирую, как можно сжать графическую информацию. Но придется ввести одно новое понятие . степень сжатия, это означает, насколько сжатое изображение будет отличаться от оригинала (термин: степень сжатия применим ко всем типам, а не только к графическому).</p>
	<p><u>Первый метод:</u> берем какое-либо изображение, накладываем на него сетку (чем мельче сетка, тем меньше степень сжатия т.е. конечное изображение больше приближено к начальному). P.S. я сделал крупную сетку для наглядности. Теперь закрашиваем клеточки (на моем примере в получившихся клеточках, если закрашено больше 70% клеточки - вся клеточка закрашивается, если меньше 70% - закрашивается белым).
	Такой способ подходит для одноцветных изображений или изображений с резкими границами между цветами, но что делать с большими, объемными изображениями?</p>
	<center> <img src="/images/elka.jpg" width = 400> <img src ="/images/elka1.jpg" width = 400> <img src = "/images/elka2.jpg" width = 400> </center>
	<p><u>Второй метод:</u> Вместо того, чтобы хранить информацию о каждом пикселе, будем хранить информацию о группе пикселей (схожих по цвету). Конечно от этого какие-то оттенки потеряются, но при низкой степени сжатия для нашего глаза это почти не заметно. Такой метод чаще всего используется при сохранении изображения в формате JPG. Вы можете сами в этом убедиться на моем примере: я взял изображение, которое было с расширением .png(где хранится информация о каждом пикселе) и просто пересохранил в .jpg(где хранится информация о группе пикселей, что заметно уменьшает размер изображения). P.S. для наглядности я выбрал наименьшее качество сжатого изображения.</p>
	<center> <img src="/images/Angry-Cheetah-480x640.png"> <img src="/images/Angry-Cheetah-480x640.jpg"> </center>
	<p><b><u>Звуковая информация</b></u> чаще в нашей жизни всего встречается в аудио-файлах (в цифровом варианте, конечно же). Методов сжатия звуковой информации очень много, поэтому расскажу о самых понятных и часто применяемых. </p>
	<p><u>Первый</u>, и наиболее распространенный метод, это выявление одинаковых кусков в аудиодорожке и хранение информации только об одном из повторяющихся кусков. Я думаю, здесь примеры не нужны. Этот метод демонстрирует нам сжатие без потерь.</p>
	<p><u>Второй метод</u> - вырезание из аудиодорожки очень высоких (или очень низких) частот, которые человеческое ухо не воспринимает. Это уже сжатие с потерями, но для человека они не заметны.</p>
	<p>И <u>третий</u>, чаще всего используемый, метод сжатия (он чем-то похож на первый метод сжатия графической информации), когда выбирается какой-то промежуток времени на аудиодорожке и производится как бы усреднение частот c плавным переходом между двумя усредненными частотами (чтобы не было скачков звука).<br><br>
	<center> <img src="/images/audio.bmp"> <img src ="/images/audio1.bmp"> <img src="/images/audio2.bmp"> </center>

	<u>Синий</u> - исходная аудиодорожка<br>
	<u>Красный</u> - усреднение двух соседних (синих) частот <br>
	<u>Оранжевый</u> - плавный переход между красными, усредненными, частотами<br></p>
	<p><b><u>Видеоинформация</b></u> по сути является последовательностью сменяющих друг друа изображений, поэтому принципы сжатия чем-то схожи со сжатием графической информации. <br>
	Я расскажу про 2 наиболее распространенных метода сжатия видеоинформации: JPEG, MPEG.<br>
	<u>JPEG</u> основан на разбиении всего видеофайла на отдельные кадры, а после применяется метод сжатия как для изображений с расширением JPG, который я описал выше (когда вместо информации о каждом пикселе, хранится информация о группе пикселей).<br>
	А <u>метод MPEG</u> основан на сжатии с потерями ключевых кадров и последующей высокочастотной фильтрации подобно алгоритму JPEG. Но информация сжимается без видимых потерь по методу компенсации движения, то есть используется межкадровое сжатие (похожее на то, как .сглаживается. аудиоинформация после сжатия). То есть специальная программа сама просчитывает, как ведет себя картинка между двумя ключевыми кадрами и воспроизводит сжатое видео по своим расчетам, при этом мы почти не заметим разницы по сравнению с несжатым видеофайлом.</p>
	<p>Я надеюсь, вы усвоили что-то из моего доклада, и он показался Вам интересным:) Если же нет, то спасибо, что хотя бы дочитали до конца.</p>
	</h4>
</div>
		
